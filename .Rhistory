x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
rm(list = ls())
setwd("~/GitHub/GraphicalModels-BayesStat")
source("Gaussian.R")
# Generate 20 decomposable graph that will be used as the true graph to generate
# 20 different datasets
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 1000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
rm(list = ls())
setwd("~/GitHub/GraphicalModels-BayesStat")
source("Gaussian.R")
# Generate 20 decomposable graph that will be used as the true graph to generate
# 20 different datasets
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
rm(list = ls())
setwd("~/GitHub/GraphicalModels-BayesStat")
source("Gaussian.R")
# Generate 20 decomposable graph that will be used as the true graph to generate
# 20 different datasets
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
rm(list = ls())
setwd("~/GitHub/GraphicalModels-BayesStat")
source("Gaussian.R")
# Generate 20 decomposable graph that will be used as the true graph to generate
# 20 different datasets
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 100000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
trueGraphs = list()
encodedList = c()
for(i in 1:10){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
trueGraphs = list()
encodedList = c()
for(i in 1:20){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 50, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
counts(mpg_distances)
count(mpg_distances)
count(map_distances)
trueGraphs = list()
encodedList = c()
for(i in 1:20){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 10)
initialCandidate = matrix(0,6,6)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
number_of_trial = 20
number_of_node = 10
trueGraphs = list()
encodedList = c()
for(i in 1:encodedList){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = number_of_node)
initialCandidate = matrix(0,number_of_node,number_of_node)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
initialCandidate
rm(list = ls())
setwd("~/GitHub/GraphicalModels-BayesStat")
source("Gaussian.R")
number_of_trial = 20
number_of_node = 10
trueGraphs = list()
encodedList = c()
for(i in 1:encodedList){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
number_of_trial = 20
number_of_node = 6
trueGraphs = list()
encodedList = c()
for(i in 1:encodedList){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
encoded
newGraph
number_of_trial = 20
number_of_node = 6
trueGraphs = list()
encodedList = c()
number_of_trial = 20
number_of_node = 6
trueGraphs = list()
encodedList = c()
for(i in 1:number_of_trial){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = number_of_node)
initialCandidate = matrix(0,number_of_node,number_of_node)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
cov(data[[2]])
trueGraph
trueGraphs
trueGraphs[[20]]
cov(data[[2]])
